{"remainingRequest":"/Users/pstaab/code/standards-grading/node_modules/babel-loader/lib/index.js!/Users/pstaab/code/standards-grading/node_modules/vuex-module-decorators/dist/esm/index.js","dependencies":[{"path":"/Users/pstaab/code/standards-grading/node_modules/vuex-module-decorators/dist/esm/index.js","mtime":1588951530997},{"path":"/Users/pstaab/code/standards-grading/node_modules/cache-loader/dist/cjs.js","mtime":1588951537868},{"path":"/Users/pstaab/code/standards-grading/node_modules/babel-loader/lib/index.js","mtime":1588951537846}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../../src/helpers.ts","../../src/vuexmodule.ts","../../src/module/stateFactory.ts","../../src/module/staticGenerators.ts","../../src/module/index.ts","../../src/config.ts","../../src/action.ts","../../src/mutation.ts","../../src/mutationaction.ts"],"names":["stateFactory"],"mappings":"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","sourcesContent":["/**\n * Takes the properties on object from parameter source and adds them to the object\n * parameter target\n * @param {object} target  Object to have properties copied onto from y\n * @param {object} source  Object with properties to be copied to x\n */\nexport function addPropertiesToObject(target: any, source: any) {\n  for (let k of Object.keys(source || {})) {\n    Object.defineProperty(target, k, {\n      get: () => source[k]\n    })\n  }\n}\n\n/**\n * Returns a namespaced name of the module to be used as a store getter\n * @param module\n */\nexport function getModuleName(module: any): string {\n  if (!module._vmdModuleName) {\n    throw new Error(`ERR_GET_MODULE_NAME : Could not get module accessor.\n      Make sure your module has name, we can't make accessors for unnamed modules\n      i.e. @Module({ name: 'something' })`)\n  }\n  return `vuexModuleDecorators/${module._vmdModuleName}`\n}\n","import {\n  ActionTree,\n  GetterTree,\n  Module as Mod,\n  ModuleTree,\n  MutationTree,\n  Store,\n  ActionContext\n} from 'vuex'\nimport { getModuleName } from './helpers'\n\nexport class VuexModule<S = ThisType<any>, R = any> implements Mod<S, R> {\n  /*\n   * To use with `extends Class` syntax along with decorators\n   */\n  static namespaced?: boolean\n  static state?: any | (() => any)\n  static getters?: GetterTree<any, any>\n  static actions?: ActionTree<any, any>\n  static mutations?: MutationTree<any>\n  static modules?: ModuleTree<any>\n\n  /*\n   * To use with `new VuexModule(<ModuleOptions>{})` syntax\n   */\n\n  modules?: ModuleTree<any>\n  namespaced?: boolean\n  getters?: GetterTree<S, R>\n  state?: S | (() => S)\n  mutations?: MutationTree<S>\n  actions?: ActionTree<S, R>\n  context!: ActionContext<S, R>\n\n  constructor(module: Mod<S, any>) {\n    this.actions = module.actions\n    this.mutations = module.mutations\n    this.state = module.state\n    this.getters = module.getters\n    this.namespaced = module.namespaced\n    this.modules = module.modules\n  }\n}\ntype ConstructorOf<C> = { new (...args: any[]): C }\n\nexport function getModule<M extends VuexModule>(\n  moduleClass: ConstructorOf<M>,\n  store?: Store<any>\n): M {\n  const moduleName = getModuleName(moduleClass)\n  if (store && store.getters[moduleName]) {\n    return store.getters[moduleName]\n  } else if ((moduleClass as any)._statics) {\n    return (moduleClass as any)._statics\n  }\n\n  const genStatic: (providedStore?: Store<any>) => M = (moduleClass as any)._genStatic\n  if (!genStatic) {\n    throw new Error(`ERR_GET_MODULE_NO_STATICS : Could not get module accessor.\n      Make sure your module has name, we can't make accessors for unnamed modules\n      i.e. @Module({ name: 'something' })`)\n  }\n\n  const storeModule = genStatic(store)\n\n  if (store) {\n    store.getters[moduleName] = storeModule\n  } else {\n    ;(moduleClass as any)._statics = storeModule\n  }\n\n  return storeModule\n}\n","import { Module as Mod } from 'vuex'\n\nconst reservedKeys = ['actions', 'getters', 'mutations', 'modules', 'state', 'namespaced', 'commit']\nexport function stateFactory<S>(module: Function & Mod<S, any>) {\n  const state = new module.prototype.constructor({})\n  const s = {} as S\n  Object.keys(state).forEach((key: string) => {\n    if (reservedKeys.indexOf(key) !== -1) {\n      if (typeof state[key] !== 'undefined') {\n        throw new Error(\n          `ERR_RESERVED_STATE_KEY_USED: You cannot use the following\n        ['actions', 'getters', 'mutations', 'modules', 'state', 'namespaced', 'commit']\n        as fields in your module. These are reserved as they have special purpose in Vuex`\n        )\n      }\n      return\n    }\n    if (state.hasOwnProperty(key)) {\n      if (typeof state[key] !== 'function') {\n        ;(s as any)[key] = state[key]\n      }\n    }\n  })\n\n  return s\n}\n","import { ActionTree, GetterTree, Module as Mod, MutationTree } from 'vuex'\nimport { DynamicModuleOptions } from '../moduleoptions'\n\nexport function staticStateGenerator<S extends Object>(\n  module: Function & Mod<S, any>,\n  modOpt: DynamicModuleOptions,\n  statics: any\n) {\n  const state: S = modOpt.stateFactory ? (module as any).state() : module.state\n  Object.keys(state).forEach((key) => {\n    if (state.hasOwnProperty(key)) {\n      // If not undefined or function means it is a state value\n      if (['undefined', 'function'].indexOf(typeof (state as any)[key]) === -1) {\n        Object.defineProperty(statics, key, {\n          get() {\n            return statics.store.state[modOpt.name][key]\n          }\n        })\n      }\n    }\n  })\n}\n\nexport function staticGetterGenerator<S>(\n  module: Function & Mod<S, any>,\n  modOpt: DynamicModuleOptions,\n  statics: any\n) {\n  Object.keys(module.getters as GetterTree<S, any>).forEach((key) => {\n    if (module.namespaced) {\n      Object.defineProperty(statics, key, {\n        get() {\n          return statics.store.getters[`${modOpt.name}/${key}`]\n        }\n      })\n    } else {\n      Object.defineProperty(statics, key, {\n        get() {\n          return statics.store.getters[key]\n        }\n      })\n    }\n  })\n}\n\nexport function staticMutationGenerator<S>(\n  module: Function & Mod<S, any>,\n  modOpt: DynamicModuleOptions,\n  statics: any\n) {\n  Object.keys(module.mutations as MutationTree<S>).forEach((key) => {\n    if (module.namespaced) {\n      statics[key] = function(...args: any[]) {\n        statics.store.commit(`${modOpt.name}/${key}`, ...args)\n      }\n    } else {\n      statics[key] = function(...args: any[]) {\n        statics.store.commit(key, ...args)\n      }\n    }\n  })\n}\n\nexport function staticActionGenerators<S>(\n  module: Function & Mod<S, any>,\n  modOpt: DynamicModuleOptions,\n  statics: any\n) {\n  Object.keys(module.actions as ActionTree<S, any>).forEach((key) => {\n    if (module.namespaced) {\n      statics[key] = async function(...args: any[]) {\n        return statics.store.dispatch(`${modOpt.name}/${key}`, ...args)\n      }\n    } else {\n      statics[key] = async function(...args: any[]) {\n        return statics.store.dispatch(key, ...args)\n      }\n    }\n  })\n}\n","import { GetterTree, Module as Mod, Store } from 'vuex'\nimport { DynamicModuleOptions, ModuleOptions } from '../moduleoptions'\nimport { stateFactory as sf } from './stateFactory'\nimport { addPropertiesToObject } from '../helpers'\nimport {\n  staticActionGenerators,\n  staticGetterGenerator,\n  staticMutationGenerator,\n  staticStateGenerator\n} from './staticGenerators'\n\nfunction registerDynamicModule<S>(module: Mod<S, any>, modOpt: DynamicModuleOptions) {\n  if (!modOpt.name) {\n    throw new Error('Name of module not provided in decorator options')\n  }\n\n  if (!modOpt.store) {\n    throw new Error('Store not provided in decorator options when using dynamic option')\n  }\n\n  modOpt.store.registerModule(\n    modOpt.name, // TODO: Handle nested modules too in future\n    module,\n    { preserveState: modOpt.preserveState || false }\n  )\n}\n\nfunction moduleDecoratorFactory<S>(moduleOptions: ModuleOptions) {\n  return function<TFunction extends Function>(constructor: TFunction): TFunction | void {\n    const module: Function & Mod<S, any> = constructor\n    const stateFactory = () => sf(module)\n\n    if (!module.state) {\n      module.state = moduleOptions && moduleOptions.stateFactory ? stateFactory : stateFactory()\n    }\n    if (!module.getters) {\n      module.getters = {} as GetterTree<S, any>\n    }\n    if (!module.namespaced) {\n      module.namespaced = moduleOptions && moduleOptions.namespaced\n    }\n    Object.getOwnPropertyNames(module.prototype).forEach((funcName: string) => {\n      const descriptor = Object.getOwnPropertyDescriptor(\n        module.prototype,\n        funcName\n      ) as PropertyDescriptor\n      if (descriptor.get && module.getters) {\n        module.getters[funcName] = function(\n          state: S,\n          getters: GetterTree<S, any>,\n          rootState: any,\n          rootGetters: GetterTree<any, any>\n        ) {\n          const thisObj = { context: { state, getters, rootState, rootGetters } }\n          addPropertiesToObject(thisObj, state)\n          addPropertiesToObject(thisObj, getters)\n          const got = (descriptor.get as Function).call(thisObj)\n          return got\n        }\n      }\n    })\n    const modOpt = moduleOptions as DynamicModuleOptions\n    if (modOpt.name) {\n      Object.defineProperty(constructor, '_genStatic', {\n        value: (store?: Store<any>) => {\n          let statics = { store: store || modOpt.store }\n          if (!statics.store) {\n            throw new Error(`ERR_STORE_NOT_PROVIDED: To use getModule(), either the module\n            should be decorated with store in decorator, i.e. @Module({store: store}) or\n            store should be passed when calling getModule(), i.e. getModule(MyModule, this.$store)`)\n          }\n          // ===========  For statics ==============\n          // ------ state -------\n          staticStateGenerator(module, modOpt, statics)\n\n          // ------- getters -------\n          if (module.getters) {\n            staticGetterGenerator(module, modOpt, statics)\n          }\n\n          // -------- mutations --------\n          if (module.mutations) {\n            staticMutationGenerator(module, modOpt, statics)\n          }\n          // -------- actions ---------\n          if (module.actions) {\n            staticActionGenerators(module, modOpt, statics)\n          }\n          return statics\n        }\n      })\n\n      Object.defineProperty(constructor, '_vmdModuleName', {\n        value: modOpt.name\n      })\n    }\n\n    if (modOpt.dynamic) {\n      registerDynamicModule(module, modOpt)\n    }\n    return constructor\n  }\n}\n\nexport function Module<S>(module: Function & Mod<S, any>): void\nexport function Module<S>(options: ModuleOptions): ClassDecorator\n\nexport function Module<S>(modOrOpt: ModuleOptions | (Function & Mod<S, any>)) {\n  if (typeof (modOrOpt as any) === 'function') {\n    /*\n     * @Module decorator called without options (directly on the class definition)\n     */\n    moduleDecoratorFactory({})(modOrOpt as Function & Mod<S, any>)\n  } else {\n    /*\n     * @Module({...}) decorator called with options\n     */\n    return moduleDecoratorFactory(modOrOpt)\n  }\n}\n","export const config: IConfig = {}\n\nexport interface IConfig {\n  rawError?: boolean\n}\n","import { Action as Act, ActionContext, Module as Mod, Payload } from 'vuex'\nimport { getModule, VuexModule } from './vuexmodule'\nimport { addPropertiesToObject, getModuleName } from './helpers'\nimport { config } from './config'\n\n/**\n * Parameters that can be passed to the @Action decorator\n */\nexport interface ActionDecoratorParams {\n  commit?: string\n  rawError?: boolean\n  root?: boolean\n}\nfunction actionDecoratorFactory<T>(params?: ActionDecoratorParams): MethodDecorator {\n  const { commit = undefined, rawError = !!config.rawError, root = false } = params || {}\n  return function(target: Object, key: string | symbol, descriptor: TypedPropertyDescriptor<any>) {\n    const module = target.constructor as Mod<T, any>\n    if (!module.hasOwnProperty('actions')) {\n      module.actions = Object.assign({}, module.actions)\n    }\n    const actionFunction: Function = descriptor.value\n    const action: Act<typeof target, any> = async function(\n      context: ActionContext<typeof target, any>,\n      payload: Payload\n    ) {\n      try {\n        let actionPayload = null\n\n        if ((module as any)._genStatic) {\n          const moduleName = getModuleName(module)\n          const moduleAccessor = context.rootGetters[moduleName]\n            ? context.rootGetters[moduleName]\n            : getModule(module as typeof VuexModule)\n          moduleAccessor.context = context\n          actionPayload = await actionFunction.call(moduleAccessor, payload)\n        } else {\n          const thisObj = { context }\n          addPropertiesToObject(thisObj, context.state)\n          addPropertiesToObject(thisObj, context.getters)\n          actionPayload = await actionFunction.call(thisObj, payload)\n        }\n        if (commit) {\n          context.commit(commit, actionPayload)\n        }\n        return actionPayload\n      } catch (e) {\n        throw rawError\n          ? e\n          : new Error(\n              'ERR_ACTION_ACCESS_UNDEFINED: Are you trying to access ' +\n                'this.someMutation() or this.someGetter inside an @Action? \\n' +\n                'That works only in dynamic modules. \\n' +\n                'If not dynamic use this.context.commit(\"mutationName\", payload) ' +\n                'and this.context.getters[\"getterName\"]' +\n                '\\n' +\n                new Error(`Could not perform action ${key.toString()}`).stack +\n                '\\n' +\n                e.stack\n            )\n      }\n    }\n    module.actions![key as string] = root ? { root, handler: action } : action\n  }\n}\n\nexport function Action<T, R>(\n  target: T,\n  key: string | symbol,\n  descriptor: TypedPropertyDescriptor<(...args: any[]) => R>\n): void\nexport function Action<T>(params: ActionDecoratorParams): MethodDecorator\n\n/**\n * The @Action decorator turns an async function into an Vuex action\n *\n * @param targetOrParams the module class\n * @param key name of the action\n * @param descriptor the action function descriptor\n * @constructor\n */\nexport function Action<T, R>(\n  targetOrParams: T | ActionDecoratorParams,\n  key?: string | symbol,\n  descriptor?: TypedPropertyDescriptor<(...args: any[]) => R>\n) {\n  if (!key && !descriptor) {\n    /*\n     * This is the case when `targetOrParams` is params.\n     * i.e. when used as -\n     * <pre>\n        @Action({commit: 'incrCount'})\n        async getCountDelta() {\n          return 5\n        }\n     * </pre>\n     */\n    return actionDecoratorFactory(targetOrParams as ActionDecoratorParams)\n  } else {\n    /*\n     * This is the case when @Action is called on action function\n     * without any params\n     * <pre>\n     *   @Action\n     *   async doSomething() {\n     *    ...\n     *   }\n     * </pre>\n     */\n    actionDecoratorFactory()(targetOrParams, key!, descriptor!)\n  }\n}\n","import { Module as Mod, Mutation as Mut, Payload } from 'vuex'\n\nexport function Mutation<T extends Object, R>(\n  target: T,\n  key: string | symbol,\n  descriptor: TypedPropertyDescriptor<(...args: any[]) => R>\n) {\n  const module = target.constructor as Mod<T, any>\n  if (!module.hasOwnProperty('mutations')) {\n    module.mutations = Object.assign({}, module.mutations)\n  }\n  const mutationFunction: Function = descriptor.value!\n  const mutation: Mut<typeof target> = function(state: typeof target, payload: Payload) {\n    mutationFunction.call(state, payload)\n  }\n  module.mutations![key as string] = mutation\n}\n","import { Action as Act, ActionContext, Module as Mod, Mutation as Mut, Payload, Store } from 'vuex'\n\nexport interface MutationActionParams<M> {\n  mutate?: (keyof Partial<M>)[]\n  rawError?: boolean\n  root?: boolean\n}\n\nfunction mutationActionDecoratorFactory<T extends Object>(params: MutationActionParams<T>) {\n  return function(\n    target: T,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<Partial<T>>>\n  ) {\n    const module = target.constructor as Mod<T, any>\n    if (!module.hasOwnProperty('mutations')) {\n      module.mutations = Object.assign({}, module.mutations)\n    }\n    if (!module.hasOwnProperty('actions')) {\n      module.actions = Object.assign({}, module.actions)\n    }\n    const mutactFunction = descriptor.value as (payload: any) => Promise<any>\n\n    const action: Act<typeof target, any> = async function(\n      context: ActionContext<typeof target, any>,\n      payload: Payload\n    ) {\n      try {\n        const actionPayload = await mutactFunction.call(context, payload)\n        context.commit(key as string, actionPayload)\n      } catch (e) {\n        if (params.rawError) {\n          throw e\n        } else {\n          console.error('Could not perform action ' + key.toString())\n          console.error(e)\n          return Promise.reject(e)\n        }\n      }\n    }\n\n    const mutation: Mut<typeof target> = function(\n      state: typeof target | Store<T>,\n      payload: Payload & { [k in keyof T]: any }\n    ) {\n      if (!params.mutate) {\n        params.mutate = Object.keys(payload) as (keyof T)[]\n      }\n      for (let stateItem of params.mutate) {\n        if (state.hasOwnProperty(stateItem) && payload.hasOwnProperty(stateItem)) {\n          ;(state as T)[stateItem] = payload[stateItem]\n        } else {\n          throw new Error(`ERR_MUTATE_PARAMS_NOT_IN_PAYLOAD\n          In @MutationAction, mutate: ['a', 'b', ...] array keys must\n          match with return type = {a: {}, b: {}, ...} and must\n          also be in state.`)\n        }\n      }\n    }\n    module.actions![key as string] = params.root ? { root: true, handler: action } : action\n    module.mutations![key as string] = mutation\n  }\n}\n\nexport function MutationAction<K, T extends K>(\n  target: { [k in keyof T]: T[k] | null },\n  key: string | symbol,\n  descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<K>>\n): void\n\nexport function MutationAction<T>(\n  params: MutationActionParams<T>\n): (\n  target: T,\n  key: string | symbol,\n  descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n) => void\n\n/**\n * The @MutationAction decorator turns this into an action that further calls a mutation\n * Both the action and the mutation are generated for you\n *\n * @param paramsOrTarget the params or the target class\n * @param key the name of the function\n * @param descriptor the function body\n * @constructor\n */\nexport function MutationAction<T, K, M extends K>(\n  paramsOrTarget: MutationActionParams<T> | M,\n  key?: string | symbol,\n  descriptor?: TypedPropertyDescriptor<(...args: any[]) => Promise<Partial<K>>>\n):\n  | ((\n      target: T,\n      key: string | symbol,\n      descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<Partial<T>>>\n    ) => void)\n  | void {\n  if (!key && !descriptor) {\n    /*\n     * This is the case when `paramsOrTarget` is params.\n     * i.e. when used as -\n     * <pre>\n        @MutationAction({mutate: ['incrCount']})\n        async getCountDelta() {\n          return {incrCount: 5}\n        }\n     * </pre>\n     */\n    return mutationActionDecoratorFactory(paramsOrTarget as MutationActionParams<T>)\n  } else {\n    /*\n     * This is the case when `paramsOrTarget` is target.\n     * i.e. when used as -\n     * <pre>\n        @MutationAction\n        async getCountDelta() {\n          return {incrCount: 5}\n        }\n     * </pre>\n     */\n    mutationActionDecoratorFactory({} as MutationActionParams<K>)(\n      paramsOrTarget as K,\n      key!,\n      descriptor!\n    )\n  }\n}\n"]}]}